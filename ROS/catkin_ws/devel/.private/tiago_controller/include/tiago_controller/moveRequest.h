// Generated by gencpp from file tiago_controller/moveRequest.msg
// DO NOT EDIT!


#ifndef TIAGO_CONTROLLER_MESSAGE_MOVEREQUEST_H
#define TIAGO_CONTROLLER_MESSAGE_MOVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace tiago_controller
{
template <class ContainerAllocator>
struct moveRequest_
{
  typedef moveRequest_<ContainerAllocator> Type;

  moveRequest_()
    : pose()
    , duration(0.0)
    , use_orientation(false)
    , use_position(false)
    , task_name()  {
    }
  moveRequest_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , duration(0.0)
    , use_orientation(false)
    , use_position(false)
    , task_name(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef float _duration_type;
  _duration_type duration;

   typedef uint8_t _use_orientation_type;
  _use_orientation_type use_orientation;

   typedef uint8_t _use_position_type;
  _use_position_type use_position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_name_type;
  _task_name_type task_name;





  typedef boost::shared_ptr< ::tiago_controller::moveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago_controller::moveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct moveRequest_

typedef ::tiago_controller::moveRequest_<std::allocator<void> > moveRequest;

typedef boost::shared_ptr< ::tiago_controller::moveRequest > moveRequestPtr;
typedef boost::shared_ptr< ::tiago_controller::moveRequest const> moveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago_controller::moveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago_controller::moveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago_controller::moveRequest_<ContainerAllocator1> & lhs, const ::tiago_controller::moveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.duration == rhs.duration &&
    lhs.use_orientation == rhs.use_orientation &&
    lhs.use_position == rhs.use_position &&
    lhs.task_name == rhs.task_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago_controller::moveRequest_<ContainerAllocator1> & lhs, const ::tiago_controller::moveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago_controller::moveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_controller::moveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_controller::moveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_controller::moveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_controller::moveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_controller::moveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago_controller::moveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd8ad08e16c09384d95325007ea8433d";
  }

  static const char* value(const ::tiago_controller::moveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd8ad08e16c09384ULL;
  static const uint64_t static_value2 = 0xd95325007ea8433dULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago_controller::moveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago_controller/moveRequest";
  }

  static const char* value(const ::tiago_controller::moveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago_controller::moveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose\n"
"float32 duration\n"
"bool use_orientation\n"
"bool use_position\n"
"string task_name\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::tiago_controller::moveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago_controller::moveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.duration);
      stream.next(m.use_orientation);
      stream.next(m.use_position);
      stream.next(m.task_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago_controller::moveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago_controller::moveRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "use_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_orientation);
    s << indent << "use_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_position);
    s << indent << "task_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO_CONTROLLER_MESSAGE_MOVEREQUEST_H
